AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  lambda-function

  authorizer function

Globals:
  Function:
    Timeout: 3

    LoggingConfig:
      LogFormat: JSON

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: authorizer-user-pool
      Schema:
        - Name: cpf
          AttributeDataType: String
          Mutable: false
          Required: true
      UsernameAttributes: [ ]
      AutoVerifiedAttributes: [ ]

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: authorizer-user-pool-client
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
      PreventUserExistenceErrors: ENABLED

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorizer/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_APP_CLIENT_ID: !Ref CognitoUserPoolClient

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Authorizer.LogicalResourceId}'
      RetentionInDays: 2

  ApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: authorizer-api
      StageName: prod
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        AllowOrigins:
          - '*'
        AllowHeaders:
          - '*'
      AccessLogSettings:
        DestinationArn: !GetAtt LogGroup.Arn
        Format: '$context.identity.sourceIp - - [$context.requestTime] "$context.httpMethod $context.routeKey $context.protocol" $context.status $context.responseLength $context.requestId'
      Auth:
        Authorizers:
          LambdaAuthorizer:
            AuthorizerPayloadFormatVersion: '2.0'
            EnableFunctionDefaultPermissions: true
            EnableSimpleResponses: true
            FunctionArn: !GetAtt Authorizer.Arn

        DefaultAuthorizer: LambdaAuthorizer
        EnableIamAuthorizer: false
      RouteSettings:
        - RouteKey: ANY /{proxy+}
